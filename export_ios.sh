#!/bin/bash
set -e  # D·ª´ng script n·∫øu c√≥ l·ªói

# L·∫•y th∆∞ m·ª•c ch·ª©a script
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)

# T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
mkdir -p "$SCRIPT_DIR/logs"

# ƒê·ªãnh nghƒ©a c√°c bi·∫øn
UNITY_PATH="/Applications/Unity/Hub/Editor/2022.3.57f1/Unity.app/Contents/MacOS/Unity"
PROJECT_PATH="$SCRIPT_DIR/MonkeyStories_UN"
RN_PROJECT_PATH="$SCRIPT_DIR/MonkeyStories"
EXPORT_PATH="$SCRIPT_DIR/unity_ios_build"
FINAL_IOS_PATH="$RN_PROJECT_PATH/unity/builds/ios"
XCODE_PROJ_PATH="$EXPORT_PATH/Unity-iPhone.xcodeproj"
NATIVE_CALL_PROXY_PATH="$EXPORT_PATH/Libraries/Plugins/iOS/NativeCallProxy.h"
PBXPROJ_FILE="$XCODE_PROJ_PATH/project.pbxproj"
IOS_DIR="$RN_PROJECT_PATH/ios"

# T√™n file log v·ªõi timestamp
LOG_FILE="$SCRIPT_DIR/logs/export_ios_$(date +%Y%m%d_%H%M%S).log"
LOG_FILE_UNITY_FW="$SCRIPT_DIR/logs/unityframework_build_$(date +%Y%m%d_%H%M%S).log"

# Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
if [ ! -f "$UNITY_PATH" ]; then
    echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y Unity Editor t·∫°i $UNITY_PATH"
    exit 1
fi

if [ ! -d "$PROJECT_PATH" ]; then
    echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y d·ª± √°n Unity t·∫°i $PROJECT_PATH"
    exit 1
fi

if [ ! -d "$RN_PROJECT_PATH" ]; then
    echo "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y d·ª± √°n React Native t·∫°i $RN_PROJECT_PATH"
    exit 1
fi

# T·∫°o th∆∞ m·ª•c xu·∫•t cu·ªëi n·∫øu ch∆∞a t·ªìn t·∫°i
mkdir -p "$FINAL_IOS_PATH"

echo "===================================="
echo "üöÄ B·∫Øt ƒë·∫ßu xu·∫•t d·ª± √°n Unity sang iOS..."
echo "üìÇ D·ª± √°n Unity: $PROJECT_PATH"
echo "üìÇ D·ª± √°n React Native: $RN_PROJECT_PATH"
echo "üìÇ Th∆∞ m·ª•c xu·∫•t t·∫°m: $EXPORT_PATH"
echo "üìÇ Th∆∞ m·ª•c xu·∫•t cu·ªëi: $FINAL_IOS_PATH"
echo "üìú Log file: $LOG_FILE"
echo "===================================="

# Xo√° v√† t·∫°o l·∫°i th∆∞ m·ª•c xu·∫•t
rm -rf "$EXPORT_PATH"
mkdir -p "$EXPORT_PATH"

# Ch·∫°y Unity ƒë·ªÉ export d·ª± √°n iOS v·ªõi timeout
echo "üîÑ ƒêang export t·ª´ Unity..."
timeout 1800 "$UNITY_PATH" -quit -batchmode -projectPath "$PROJECT_PATH" -executeMethod ExportiOS.Export -logFile "$LOG_FILE" || {
    echo "‚ùå L·ªói: Unity export th·∫•t b·∫°i ho·∫∑c timeout"
    echo "üìú Chi ti·∫øt l·ªói cu·ªëi c√πng:"
    tail -n 20 "$LOG_FILE"
    exit 1
}

# Backup project.pbxproj tr∆∞·ªõc khi ch·ªânh s·ª≠a
if [ -f "$PBXPROJ_FILE" ]; then
    cp "$PBXPROJ_FILE" "${PBXPROJ_FILE}.backup"
    echo "üì¶ ƒê√£ t·∫°o backup project.pbxproj"
fi

# Thay ƒë·ªïi Target Membership v·ªõi x·ª≠ l√Ω l·ªói
if [ -f "$NATIVE_CALL_PROXY_PATH" ]; then
    echo "üîß ƒêang ch·ªânh s·ª≠a project.pbxproj..."
    if ! sed -i '' 's|\(.*NativeCallProxy.h.*PBXBuildFile; fileRef = .*; \)|\1settings = {ATTRIBUTES = (Public); }; |g' "$PBXPROJ_FILE"; then
        echo "‚ùå L·ªói khi ch·ªânh s·ª≠a project.pbxproj"
        [ -f "${PBXPROJ_FILE}.backup" ] && cp "${PBXPROJ_FILE}.backup" "$PBXPROJ_FILE"
        exit 1
    fi
fi

echo "üîß Chuy·ªÉn target membership c·ªßa th∆∞ m·ª•c Data sang UnityFramework..."
ruby update_target_membership.rb "$XCODE_PROJ_PATH"

echo "üöÄ B·∫Øt ƒë·∫ßu build UnityFramework trong Xcode..."

# # Ki·ªÉm tra xem project.pbxproj c√≥ t·ªìn t·∫°i kh√¥ng
if [ ! -f "$PBXPROJ_FILE" ]; then
    echo "‚ùå Kh√¥ng t√¨m th·∫•y project.pbxproj t·∫°i $PBXPROJ_FILE!"
    exit 1
fi

# # Ch·∫°y xcodebuild ƒë·ªÉ build UnityFramework
xcodebuild -project "$XCODE_PROJ_PATH" -scheme UnityFramework -configuration Release -sdk iphoneos clean build | tee "$LOG_FILE_UNITY_FW"

# # Ki·ªÉm tra k·∫øt qu·∫£ build
if [ $? -eq 0 ]; then
    echo "‚úÖ Build UnityFramework th√†nh c√¥ng!"
else
    echo "‚ùå Build UnityFramework th·∫•t b·∫°i! Ki·ªÉm tra log: $SCRIPT_DIR/unityframework_build.log"
    exit 1
fi

# L·∫•y ƒë∆∞·ªùng d·∫´n DerivedData t·ª´ xcodebuild
DERIVED_DATA_PATH=$(xcodebuild -project "$XCODE_PROJ_PATH" -scheme UnityFramework -showBuildSettings | grep -m 1 "BUILD_DIR" | awk '{print $3}')

if [ -z "$DERIVED_DATA_PATH" ]; then
    echo "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c DerivedData t·ª´ Xcode!"
    exit 1
fi

# ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c c·ªßa UnityFramework.framework
UNITY_FRAMEWORK_PATH="$DERIVED_DATA_PATH/Release-iphoneos/UnityFramework.framework"

if [ -d "$UNITY_FRAMEWORK_PATH" ]; then
    echo "üöö ƒêang sao ch√©p UnityFramework.framework v√†o th∆∞ m·ª•c cu·ªëi c√πng..."
    rm -rf "$FINAL_IOS_PATH/UnityFramework.framework" # X√≥a framework c≈© n·∫øu c√≥
    cp -R "$UNITY_FRAMEWORK_PATH" "$FINAL_IOS_PATH"
    echo "‚úÖ Sao ch√©p UnityFramework.framework th√†nh c√¥ng v√†o: $FINAL_IOS_PATH"
else
    echo "‚ùå Kh√¥ng t√¨m th·∫•y UnityFramework.framework trong th∆∞ m·ª•c Build!"
    exit 1
fi

# X√≥a Pods v√† Podfile.lock
rm -rf "$IOS_DIR/Pods"
rm -f "$IOS_DIR/Podfile.lock"

echo "‚úÖ ƒê√£ x√≥a Pods v√† Podfile.lock!"

# Ch·∫°y l·∫°i pod install
echo "üì¶ ƒêang c√†i ƒë·∫∑t l·∫°i Pods..."
cd "$IOS_DIR" && timeout 300 pod install || {
    echo "‚ùå L·ªói: Pod install th·∫•t b·∫°i ho·∫∑c timeout"
    exit 1
}

echo "===================================="
echo "‚úÖ Qu√° tr√¨nh xu·∫•t iOS ho√†n t·∫•t!"
echo "üìÇ Framework t·∫°i: $FINAL_IOS_PATH"
echo "üìú Log files:"
echo "   - Unity Export: $LOG_FILE"
echo "   - Framework Build: $LOG_FILE_UNITY_FW"
echo "===================================="
