#!/bin/bash

# L·∫•y th∆∞ m·ª•c ch·ª©a script
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)
echo "Th∆∞ m·ª•c script: $SCRIPT_DIR"

# ƒê·ªãnh nghƒ©a c√°c bi·∫øn
UNITY_PATH="/Applications/Unity/Hub/Editor/2022.3.57f1/Unity.app/Contents/MacOS/Unity"
PROJECT_PATH="$SCRIPT_DIR/MonkeyStories_UN" # ƒê∆∞·ªùng d·∫´n ƒë·∫øn d·ª± √°n Unity
RN_PROJECT_PATH="$SCRIPT_DIR/MonkeyStories" # ƒê∆∞·ªùng d·∫´n ƒë·∫øn d·ª± √°n React Native
EXPORT_PATH="$SCRIPT_DIR/unity_ios_build" # Xu·∫•t t·∫°m ra th∆∞ m·ª•c ngo√†i RN project
FINAL_IOS_PATH="$RN_PROJECT_PATH/unity/builds/ios" # Th∆∞ m·ª•c l∆∞u framework cu·ªëi c√πng
XCODE_PROJ_PATH="$EXPORT_PATH/Unity-iPhone.xcodeproj"
NATIVE_CALL_PROXY_PATH="$EXPORT_PATH/Libraries/Plugins/iOS/NativeCallProxy.h"
FRAMEWORK_PATH="$EXPORT_PATH/UnityFramework"
PBXPROJ_FILE="$XCODE_PROJ_PATH/project.pbxproj"
DERIVED_DATA_PATH="$HOME/Library/Developer/Xcode/DerivedData"
IOS_DIR="$RN_PROJECT_PATH/ios"

# T√™n file log
LOG_FILE="$SCRIPT_DIR/logs/export_ios.log"
LOG_FILE_UNITY_FW="$SCRIPT_DIR/logs/unityframework_build.log"

echo "B·∫Øt ƒë·∫ßu xu·∫•t d·ª± √°n Unity sang iOS..."
echo "D·ª± √°n Unity: $PROJECT_PATH"
echo "D·ª± √°n React Native: $RN_PROJECT_PATH"
echo "Th∆∞ m·ª•c xu·∫•t t·∫°m: $EXPORT_PATH"
echo "Th∆∞ m·ª•c xu·∫•t cu·ªëi: $FINAL_IOS_PATH"

#Xo√° th∆∞ m·ª•c c≈© n·∫øu t·ªìn t·∫°i
if [ -d "$EXPORT_PATH" ]; then
    rm -rf "$EXPORT_PATH"
    echo "ƒê√£ xo√° th∆∞ m·ª•c c≈©: $EXPORT_PATH"
fi

# Ch·∫°y Unity ƒë·ªÉ export d·ª± √°n iOS
"$UNITY_PATH" -quit -batchmode -projectPath "$PROJECT_PATH" -executeMethod ExportiOS.Export -logFile "$LOG_FILE"

# Ki·ªÉm tra xem qu√° tr√¨nh export c√≥ th√†nh c√¥ng kh√¥ng
if [ ! -d "$EXPORT_PATH" ]; then
    echo "L·ªói: Export iOS th·∫•t b·∫°i, kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c xu·∫•t."
    exit 1
fi

echo "‚úÖ Export iOS ho√†n t·∫•t! Th∆∞ m·ª•c xu·∫•t: $EXPORT_PATH"

# Thay ƒë·ªïi Target Membership c·ªßa NativeCallProxy.h sang Public (n·∫øu file t·ªìn t·∫°i)
if [ -f "$NATIVE_CALL_PROXY_PATH" ]; then
    echo "üîß ƒêang ch·ªânh s·ª≠a project.pbxproj ƒë·ªÉ ƒë·∫∑t NativeCallProxy.h th√†nh Public..."
    sed -i '' 's|\(.*NativeCallProxy.h.*PBXBuildFile; fileRef = .*; \)|\1settings = {ATTRIBUTES = (Public); }; |g' "$PBXPROJ_FILE"
    echo "‚úÖ ƒê√£ ch·ªânh s·ª≠a project.pbxproj!"
else
    echo "‚ùå Kh√¥ng t√¨m th·∫•y NativeCallProxy.h, ki·ªÉm tra l·∫°i qu√° tr√¨nh export!"
    exit 1
fi

echo "üîß Chuy·ªÉn target membership c·ªßa th∆∞ m·ª•c Data sang UnityFramework..."
ruby update_target_membership.rb "$XCODE_PROJ_PATH"

echo "üöÄ B·∫Øt ƒë·∫ßu build UnityFramework trong Xcode..."

# # Ki·ªÉm tra xem project.pbxproj c√≥ t·ªìn t·∫°i kh√¥ng
if [ ! -f "$PBXPROJ_FILE" ]; then
    echo "‚ùå Kh√¥ng t√¨m th·∫•y project.pbxproj t·∫°i $PBXPROJ_FILE!"
    exit 1
fi

# # Ch·∫°y xcodebuild ƒë·ªÉ build UnityFramework
xcodebuild -project "$XCODE_PROJ_PATH" -scheme UnityFramework -configuration Release -sdk iphoneos clean build | tee "$LOG_FILE_UNITY_FW"

# # Ki·ªÉm tra k·∫øt qu·∫£ build
if [ $? -eq 0 ]; then
    echo "‚úÖ Build UnityFramework th√†nh c√¥ng!"
else
    echo "‚ùå Build UnityFramework th·∫•t b·∫°i! Ki·ªÉm tra log: $SCRIPT_DIR/unityframework_build.log"
    exit 1
fi

# L·∫•y ƒë∆∞·ªùng d·∫´n DerivedData t·ª´ xcodebuild
DERIVED_DATA_PATH=$(xcodebuild -project "$XCODE_PROJ_PATH" -scheme UnityFramework -showBuildSettings | grep -m 1 "BUILD_DIR" | awk '{print $3}')

if [ -z "$DERIVED_DATA_PATH" ]; then
    echo "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c DerivedData t·ª´ Xcode!"
    exit 1
fi

# ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c c·ªßa UnityFramework.framework
UNITY_FRAMEWORK_PATH="$DERIVED_DATA_PATH/Release-iphoneos/UnityFramework.framework"

if [ -d "$UNITY_FRAMEWORK_PATH" ]; then
    echo "üöö ƒêang sao ch√©p UnityFramework.framework v√†o th∆∞ m·ª•c cu·ªëi c√πng..."
    rm -rf "$FINAL_IOS_PATH/UnityFramework.framework" # X√≥a framework c≈© n·∫øu c√≥
    cp -R "$UNITY_FRAMEWORK_PATH" "$FINAL_IOS_PATH"
    echo "‚úÖ Sao ch√©p UnityFramework.framework th√†nh c√¥ng v√†o: $FINAL_IOS_PATH"
else
    echo "‚ùå Kh√¥ng t√¨m th·∫•y UnityFramework.framework trong th∆∞ m·ª•c Build!"
    exit 1
fi

# X√≥a Pods v√† Podfile.lock
rm -rf "$IOS_DIR/Pods"
rm -f "$IOS_DIR/Podfile.lock"

echo "‚úÖ ƒê√£ x√≥a Pods v√† Podfile.lock!"

# Ch·∫°y l·∫°i pod install
echo "üì¶ ƒêang c√†i ƒë·∫∑t l·∫°i Pods..."
cd "$IOS_DIR" && pod install
